class Solution {
public:
    vector<int>parent;
    int numIslands(vector<vector<char>>& grid) {
        if (grid.size() == 0) return 0;
        int m = grid.size(), n = m ? grid[0].size() : 0;
        Init(m*n);
        int count = 0;
        for (int i = 0; i < m; i++) 
            for (int j = 0; j < n; j++) 
                if (grid[i][j] == '1') count++;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ( i > 0 && grid[i][j] == '1' && grid[i-1][j] == '1')
                    count -= Union(i*n +j, (i-1)*n+j);
                
                if ( j > 0 && grid[i][j] == '1' && grid[i][j-1] == '1') 
                    count -= Union(i*n +j, i*n+j-1);
             
            }
        }
        return count;

    }
    void Init (int n) {
        parent.resize(n);
        for (int i = 0; i < n; i++) 
            parent[i] = i;       
    }
    int FindParent(int i) {
        if (parent[i] != i)
            parent[i] = FindParent(parent[i]);
        return parent[i];
    }
    bool Union(int x, int y) {
        int xp = FindParent(x);
        int yp = FindParent(y);
        if (xp != yp)
            parent[xp] = yp;
        return xp != yp;
    }
};
