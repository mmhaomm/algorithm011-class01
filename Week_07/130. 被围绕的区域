class Solution {
public:
    vector<int>parent;
    int dx[4] = {-1, 1, 0, 0};
    int dy[4] = { 0, 0,-1, 1};
    void solve(vector<vector<char>>& board) {
        if (board.size() == 0) return ;
        int m = board.size(), n = m ? board[0].size() : 0;
        Init(m * n + 1);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    if (i == 0 || i == m - 1 || j == 0 || j == n - 1)
                        Union(i * n + j, m * n);
                    else {
                        for (int k = 0; k < 4; k++){
                            int nx = i + dx[k];
                            int ny = j + dy[k];
                            if (board[nx][ny] == 'O'){
                                Union(i * n + j, nx * n + ny);
                            }
                        }
                    }
                }                   
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][i] == 'O' && FindParent(i * n + j) != FindParent(n * m)) 
                    board[i][j] = 'X';
            }
        }
    }
    void Init(int n) {
        parent.resize(n);
        for (int i = 0; i < n; i++) 
            parent[i] = i;       
    }
    int FindParent(int i) {
        if ( parent[i] != i )
            parent[i] = FindParent(parent[i]);
        return parent[i];
    }
    void Union(int x, int y) {
        int xp = FindParent(x);
        int yp = FindParent(y);
        if (xp != yp)
            parent[xp] = yp;
    }
    bool IsConnected(int x, int y) {
        return FindParent(x) == FindParent(y);
    }
};
