struct Node {
    bool word;
    string str;
    unordered_map<char, Node*> ChildTable;
};
class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new Node();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* cur = root;
        for (int i = 0; i < word.size(); i++) {
            if (cur->ChildTable.count(word[i]) == 0) 
                cur->ChildTable[word[i]] = new Node();
            cur = cur->ChildTable[word[i]];
        }
        cur->str = word;
        cur->word = true;
    }
    
    /** Returns if the word is in the trie. */
    void search(vector<string>&ans, vector<vector<char>>& board) {
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[0].size(); j++) {
                DFS(ans, board, root, i, j);
            }
        }
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    void DFS (vector<string>&ans, vector<vector<char>>& board, Node* p, int x, int y) {
        if (p->word) {
            p->word = false;
            ans.push_back(p->str);
            return;
        }
        if (x < 0 || y < 0 || x == board.size() || y == board[x].size()) return;
        if (p->ChildTable.find(board[x][y]) == p->ChildTable.end()) return;
        p = p->ChildTable[board[x][y]];
        char letter = board[x][y];
        board[x][y] = '*';
        DFS(ans, board, p, x + 1, y);
        DFS(ans, board, p, x - 1, y);
        DFS(ans, board, p, x, y + 1);
        DFS(ans, board, p, x, y - 1);
        board[x][y] = letter;
    }
private:
    Node* root;
};
class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        Trie trie;
        vector<string>ans;
        for (string word : words) 
            trie.insert(word);
        trie.search(ans, board);
        return ans;
    }
};
