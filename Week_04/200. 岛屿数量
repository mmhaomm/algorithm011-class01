class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int row = grid.size();
        int col = row ? grid[0].size() : 0;
        int ans = 0;
        int offset[] = {0, -1, 0, 1, 0};
        for (int i = 0; i < row; i++){
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == '1') {
                    ans++;
                    grid[i][j] = '0';
                    queue<pair<int, int>>line;
                    line.push({i, j});
                    while (!line.empty()) {
                        pair<int, int> p = line.front();
                        line.pop();
                        for (int k = 0; k < 4; k++) {
                            int r = p.first + offset[k];
                            int c = p.second + offset[k + 1];
                            if (c >= 0 && r >= 0 && c < col && r < row && grid[r][c] == '1') {
                                line.push({r, c});
                                grid[r][c] = '0';
                            }
                        }
                    }
                }               
            }
        }
        return ans;
    }
};
