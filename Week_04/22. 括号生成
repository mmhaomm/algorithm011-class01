class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string>ans;
        string parh = "";
        DFS(ans, parh, 0, 0, n);
        return ans;
    }
    void DFS(vector<string>& ans, string parh, int left, int right, int n) {
        if (left == n && left == right) {
            ans.push_back(parh);
            return;
        }
        if (left < n) DFS(ans, parh + '(', left + 1, right, n);
        if (left > right) DFS(ans, parh + ')', left, right + 1, n);
        
    }
};
