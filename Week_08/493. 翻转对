class Solution {
public:
    int reversePairs(vector<int>& nums) {
        if (nums.empty()) return 0;
        vector<int> temp(nums.size(), 0);
        return mergeSort(nums, temp, 0, nums.size() - 1);        
    }
    int mergeSort(vector<int>& nums, vector<int>& temp, int left, int right) {
        if (left >= right) return 0;
        int mid = left + (right - left) / 2;
        int count = mergeSort(nums, temp, left, mid) + mergeSort(nums, temp, mid + 1, right);
        int i = left, j = mid + 1;
        while (i <= mid && j <= right) {
            if ((long)nums[i] <= 2 * (long)nums[j]) {
                i++;
            } else { 
                count += mid - i + 1;
                j++;
            }
        }
	    i = left, j = mid + 1;
        int k = 0;
	    while (i <= mid && j <= right) {
		    temp[k++] = nums[i] < nums[j] ? nums[i++] : nums[j++];
	    }
	    while (i <= mid) temp[k++] = nums[i++];
	    while (j <= right) temp[k++] = nums[j++];
	
        for (int i = left; i <= right; ++i) {
            nums[i] = temp[i - left];
        }

        return count;
    }
};
