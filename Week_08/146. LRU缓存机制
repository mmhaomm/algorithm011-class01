struct CacheNode {
    int key, value;
    CacheNode *prev, *next;      
    CacheNode() : key(0), value(0), prev(NULL), next(NULL) {}
    CacheNode(int _key, int _value): key(_key), value(_value), prev(nullptr), next(nullptr) {}
};

class LRUCache {
private:
    const int capacity;
    int size;
    CacheNode * head, *tail;
    unordered_map<int, CacheNode*> cache;
public:
    LRUCache(int _capacity) : capacity(_capacity), size(0) {
        head = new CacheNode();
        tail = new CacheNode();
        head->next = tail;
        tail->prev = head; 
    }
    
    int get(int key) {
        if (cache.count(key) == 0) return -1;
        CacheNode* node = cache[key];
        moveToHead(node);
        return node->value;
    }
    
    void put(int key, int value) {
        if (!cache.count(key)) {
            CacheNode *node = new CacheNode(key, value);
            cache[key] = node;
            addToHead(node);
            size++;
            if (size > capacity) {
                CacheNode* removed = removeTail();
                cache.erase(removed->key);
                delete removed;
                size--;
            }
        } else {
            CacheNode* node = cache[key];
            node->value = value;
            moveToHead(node);
        }
    }
    void addToHead(CacheNode* node) {
        node->prev = head;
        node->next = head->next;
        head->next->prev = node;
        head->next = node;
    }
    void moveToHead(CacheNode* node) {
        removeNode(node);
        addToHead(node);
    }

    void removeNode(CacheNode* node) {
        node->prev->next = node->next;
        node->next->prev = node->prev;
    }

    CacheNode* removeTail() {
        CacheNode* node = tail->prev;
        removeNode(node);
        return node;
    }  
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
